class SoftmaxClassifier(object):
    """
    A fully-connected neural network with
    softmax loss that uses a modular layer design. We assume an input dimension
    of D, a hidden dimension of H, and perform classification over C classes.

    The architecture should be fc - relu - fc - softmax with one hidden layer

    The learnable parameters of the model are stored in the dictionary
    self.params that maps parameter names to numpy arrays.
    """

    def __init__(self, input_dim=3072, hidden_dim=300, num_classes=10,
                 weight_scale=1e-3):
        """
        Initialize a new network.

        Inputs:
        - input_dim: An integer giving the size of the input
        - hidden_dim: An integer giving the size of the hidden layer, None
          if there's no hidden layer.
        - num_classes: An integer giving the number of classes to classify
        - weight_scale: Scalar giving the standard deviation for random
          initialization of the weights.
        """
        self.params = {}
        ############################################################################
        #  the weights and biases of the two-layer net. Weights    #
        #  initialized from a Gaussian centered at 0.0 with               #
        # standard deviation equal to weight_scale, and biases should be           #
        # initialized to zero. All weights and biases are be stored in the      #
        # dictionary self.params, with fc weights and biases using the keys        #
        # 'W' and 'b', i.e., W1, b1 for the weights and bias in the first linear   #
        # layer, W2, b2 for the weights and bias in the second linear layer.       #
        ############################################################################
        for i in range(num_classes):
          if (hidden_dim == 0 or hidden_dim == None):
            self.params['W0'] = np.random.normal(loc = 0.0, scale= weight_scale, size= (input_dim,1))
            self.params['b0'] = np.zeros(1)
          else:
            self.params['W1'] = np.random.normal(loc = 0.0, scale= weight_scale, size= (input_dim,hidden_dim))
            self.params['b1'] = np.zeros(hidden_dim)
            self.params['W2'] = np.random.normal(loc = 0.0, scale= weight_scale, size= (hidden_dim,num_classes))
            self.params['b2'] = np.zeros(num_classes)

        ############################################################################
        #                                                    #
        ############################################################################


    def forwards_backwards(self, X, y=None):
        """
        Compute loss and gradient for a minibatch of data.

        Inputs:
        - X: Array of input data of shape (N, Din)
        - y: Array of labels, of shape (N,). y[i] gives the label for X[i].

        Returns:
        If y is None, then run a test-time forward pass of the model and return:
        - scores: Array of shape (N, C) giving classification scores, where
          scores[i, c] is the classification score for X[i] and class c.

        If y is not None, then run a training-time forward and backward pass. And
        return a tuple of:
        - loss: Scalar value giving the loss
        - grads: Dictionary with the same keys as self.params, mapping parameter
          names to gradients of the loss with respect to those parameters.
        """
        scores = None
        ############################################################################
        # the forward pass for the two-layer net, computing the    #
        # class scores for X and storing them in the scores variable.              #
        ############################################################################
        out1, cache = fc_forward(X, self.params['W1'], self.params['b1']) 
        
        out1, cache = np.array(relu_forward(out1))
        
        scores, cache = fc_forward(out1, self.params['W2'], self.params['b2'])      
      

        ############################################################################
        #                                                  #
        ############################################################################

        # If y is None then we are in test mode so just return scores
        if y is None:
            return scores

        loss, grads = 0, {}
        
        ############################################################################
        # the backward pass for the two-layer net. Store the loss  #
        # in the loss variable and gradients in the grads dictionary. Compute data #
        # loss using softmax, and make sure that grads[k] holds the gradients for  #
        # self.params[k].                                                          # 
        ############################################################################
        loss, grad = softmax_loss(scores, y)
        grad = np.array(grad)
        #print(grad.shape)
        #grad_l1 = 1
        #grads_r = grad_l1 * grad;
        grads['X2'], grads['W2'], grads['b2'] = fc_backward(grad, (out1, self.params['W2'], self.params['b2']))
        #print(grads['X2'].shape)
        grad_b = relu_backward(grads['X2'],out1)
        grads['X1'], grads['W1'], grads['b1'] = fc_backward(grad_b, (X, self.params['W1'], self.params['b1']))    

        ############################################################################
        #                                                       #
        ############################################################################
        return loss, grads

  
